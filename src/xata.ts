// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from '@xata.io/client';
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';
import { env } from '$env/dynamic/private';

const tables = [
	{
		name: 'employees',
		checkConstraints: {
			employees_xata_id_length_xata_id: {
				name: 'employees_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {
			user_link: {
				name: 'user_link',
				columns: ['user'],
				referencedTable: 'users',
				referencedColumns: ['username'],
				onDelete: 'SET NULL'
			}
		},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_employees_xata_id_key: {
				name: '_pgroll_new_employees_xata_id_key',
				columns: ['xata_id']
			}
		},
		columns: [
			{
				name: 'archived',
				type: 'bool',
				notNull: false,
				unique: false,
				defaultValue: 'false',
				comment: ''
			},
			{
				name: 'first_name',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'last_name',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'nickname',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'position',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'user',
				type: 'link',
				link: { table: 'users' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"users"}'
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	},
	{
		name: 'entries',
		checkConstraints: {
			entries_xata_id_length_xata_id: {
				name: 'entries_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {
			employee_link: {
				name: 'employee_link',
				columns: ['employee'],
				referencedTable: 'employees',
				referencedColumns: ['xata_id'],
				onDelete: 'SET NULL'
			},
			user_link: {
				name: 'user_link',
				columns: ['user'],
				referencedTable: 'users',
				referencedColumns: ['username'],
				onDelete: 'SET NULL'
			}
		},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_entries_xata_id_key: {
				name: '_pgroll_new_entries_xata_id_key',
				columns: ['xata_id']
			}
		},
		columns: [
			{
				name: 'employee',
				type: 'link',
				link: { table: 'employees' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"employees"}'
			},
			{
				name: 'note',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'rating',
				type: 'float',
				notNull: false,
				unique: false,
				defaultValue: "'0'::double precision",
				comment: ''
			},
			{
				name: 'tags',
				type: 'multiple',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'user',
				type: 'link',
				link: { table: 'users' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"users"}'
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	},
	{
		name: 'entry_history',
		checkConstraints: {
			entry_history_xata_id_length_xata_id: {
				name: 'entry_history_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {
			entry_link: {
				name: 'entry_link',
				columns: ['entry'],
				referencedTable: 'entries',
				referencedColumns: ['xata_id'],
				onDelete: 'SET NULL'
			},
			user_link: {
				name: 'user_link',
				columns: ['user'],
				referencedTable: 'users',
				referencedColumns: ['username'],
				onDelete: 'SET NULL'
			}
		},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_entry_history_xata_id_key: {
				name: '_pgroll_new_entry_history_xata_id_key',
				columns: ['xata_id']
			}
		},
		columns: [
			{
				name: 'entry',
				type: 'link',
				link: { table: 'entries' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"entries"}'
			},
			{
				name: 'note',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'rating',
				type: 'float',
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'tags',
				type: 'multiple',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'user',
				type: 'link',
				link: { table: 'users' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"users"}'
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	},
	{
		name: 'positions',
		checkConstraints: {
			positions_xata_id_length_xata_id: {
				name: 'positions_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {
			user_link: {
				name: 'user_link',
				columns: ['user'],
				referencedTable: 'users',
				referencedColumns: ['username'],
				onDelete: 'SET NULL'
			}
		},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_positions_xata_id_key: {
				name: '_pgroll_new_positions_xata_id_key',
				columns: ['xata_id']
			}
		},
		columns: [
			{
				name: 'color',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'description',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'title',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'user',
				type: 'link',
				link: { table: 'users' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"users"}'
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	},
	{
		name: 'tags',
		checkConstraints: {
			tags_xata_id_length_xata_id: {
				name: 'tags_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {
			user_link: {
				name: 'user_link',
				columns: ['user'],
				referencedTable: 'users',
				referencedColumns: ['username'],
				onDelete: 'SET NULL'
			}
		},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_tags_xata_id_key: {
				name: '_pgroll_new_tags_xata_id_key',
				columns: ['xata_id']
			}
		},
		columns: [
			{
				name: 'color',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'description',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'name',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'user',
				type: 'link',
				link: { table: 'users' },
				notNull: true,
				unique: false,
				defaultValue: null,
				comment: '{"xata.link":"users"}'
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	},
	{
		name: 'users',
		checkConstraints: {
			users_xata_id_length_xata_id: {
				name: 'users_xata_id_length_xata_id',
				columns: ['xata_id'],
				definition: 'CHECK ((length(xata_id) < 256))'
			}
		},
		foreignKeys: {},
		primaryKey: [],
		uniqueConstraints: {
			_pgroll_new_users_xata_id_key: {
				name: '_pgroll_new_users_xata_id_key',
				columns: ['xata_id']
			},
			users__pgroll_new_username_key: {
				name: 'users__pgroll_new_username_key',
				columns: ['username']
			}
		},
		columns: [
			{
				name: 'password',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'username',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: null,
				comment: ''
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
				comment: ''
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
				comment: ''
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
				comment: ''
			}
		]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Employees = InferredTypes['employees'];
export type EmployeesRecord = Employees & XataRecord;

export type Entries = InferredTypes['entries'];
export type EntriesRecord = Entries & XataRecord;

export type EntryHistory = InferredTypes['entry_history'];
export type EntryHistoryRecord = EntryHistory & XataRecord;

export type Positions = InferredTypes['positions'];
export type PositionsRecord = Positions & XataRecord;

export type Tags = InferredTypes['tags'];
export type TagsRecord = Tags & XataRecord;

export type Users = InferredTypes['users'];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
	employees: EmployeesRecord;
	entries: EntriesRecord;
	entry_history: EntryHistoryRecord;
	positions: PositionsRecord;
	tags: TagsRecord;
	users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: 'https://jh7-s-workspace-bj4527.us-east-1.xata.sh/db/evals'
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient({ apiKey: env.XATA_API_KEY, branch: env.XATA_BRANCH });
	return instance;
};
